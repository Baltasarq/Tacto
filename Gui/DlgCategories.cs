//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión del motor en tiempo de ejecución:2.0.50727.4927
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using Tacto.Core;
using Gtk;

using GtkUtil;

namespace Tacto.Gui {
	public partial class DlgCategories : Gtk.Dialog {
		public static string Header = "Category";

		private AgendaSystem agendaSystem;
		private Boolean categoryRemoved = false;
		
		public DlgCategories(AgendaSystem agenda)
		{
			this.Build();
			
			agendaSystem = agenda;
			prepareTable();
			update();
		}
		
		protected void prepareTable()
		{
			// Create liststore
			Gtk.ListStore listStore = new Gtk.ListStore( typeof(string) );
			tvTable.Model = listStore;
			
			// Create columns belonging to the document
			var column = new Gtk.TreeViewColumn();
			var cell = new Gtk.CellRendererText();
			column.Title = Header;
			column.PackStart( cell, true );
			cell.Editable = true;
			cell.Edited += OnEdited;
			column.AddAttribute( cell, "text", 0 );
			tvTable.AppendColumn( column );
		}
		
		protected void update()
		{
			ListStore model = ( (ListStore) tvTable.Model );
			
			model.Clear();
			foreach(var category in agendaSystem.CategoryList) {
				model.AppendValues( new string[] { category.Name } );
			}
		}
		
		protected void OnEdited(object sender, Gtk.EditedArgs args)
		{
			int row = 0;
		
			// Get current position
			TreePath rowPath;
			TreeIter rowPointer;
	
			// Convert path in row and rowPointer
			rowPath = new Gtk.TreePath( args.Path );
			tvTable.Model.GetIter( out rowPointer, rowPath );
			row = rowPath.Indices[ 0 ];
			
			try {
				agendaSystem.CategoryList.Modify( row, args.NewText );
				tvTable.Model.SetValue( rowPointer, 0, args.NewText );
			} catch(Exception exc)
			{
				Util.MsgError( this, AppInfo.Name, exc.Message );
				args.RetVal = false;
			}
		}
		
		public int getCurrentRow()
		{
			int row = 0;
			TreePath rowPath;
			TreeIter rowPointer;
			TreeViewColumn colPath;
		
			// Convert path in row and rowPointer
			tvTable.GetCursor( out rowPath, out colPath );
			
			if ( rowPath != null ) {
				tvTable.Model.GetIter( out rowPointer, rowPath );
				row = rowPath.Indices[ 0 ];
			}
			
			return row;
		}
		
		protected virtual void OnAdd(object sender, System.EventArgs e)
		{
			agendaSystem.CategoryList.Append( new Category( "category_"
			                                 + Convert.ToString( agendaSystem.CategoryList.Size() + 1 )
			) );
			
			update();
		}
		
		protected virtual void OnRemove(object sender, System.EventArgs e)
		{
			try {
				agendaSystem.CategoryList.Remove( getCurrentRow() );
				CategoryRemoved = true;
				update();
			} catch(Exception ex)
			{
				Util.MsgError( this, AppInfo.Name, ex.Message );
			}
		}
		
		public Boolean CategoryRemoved {
			get { return categoryRemoved; }
			set { categoryRemoved = value; }
		}
	}
}
